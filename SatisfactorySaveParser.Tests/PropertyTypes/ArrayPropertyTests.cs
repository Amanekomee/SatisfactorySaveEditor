using System.IO;

using Microsoft.VisualStudio.TestTools.UnitTesting;

using SatisfactorySaveParser.Save;
using SatisfactorySaveParser.Save.Properties;
using SatisfactorySaveParser.Save.Properties.Abstractions;
using SatisfactorySaveParser.Save.Properties.ArrayValues;
using SatisfactorySaveParser.Save.Serialization;

namespace SatisfactorySaveParser.Tests.PropertyTypes
{
    [TestClass]
    public class ArrayPropertyTests
    {
        private const int BuildVersion = 139586;

        private const string ObjectArrayName = "mHotbarShortcuts";
        private static readonly byte[] ObjectArrayBytes = new byte[] { 0x11, 0x00, 0x00, 0x00, 0x6D, 0x48, 0x6F, 0x74, 0x62, 0x61, 0x72, 0x53, 0x68, 0x6F, 0x72, 0x74, 0x63, 0x75, 0x74, 0x73, 0x00, 0x0E, 0x00, 0x00, 0x00, 0x41, 0x72, 0x72, 0x61, 0x79, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00, 0xC4, 0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0x00, 0x4F, 0x62, 0x6A, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00, 0x00, 0x0A, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x74, 0x5F, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x00, 0x47, 0x00, 0x00, 0x00, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x74, 0x5F, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x3A, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x74, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x2E, 0x42, 0x50, 0x5F, 0x50, 0x6C, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5F, 0x43, 0x5F, 0x30, 0x2E, 0x46, 0x47, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x68, 0x6F, 0x72, 0x74, 0x63, 0x75, 0x74, 0x5F, 0x30, 0x00, 0x11, 0x00, 0x00, 0x00, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x74, 0x5F, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x00, 0x47, 0x00, 0x00, 0x00, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x74, 0x5F, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x3A, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x74, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x2E, 0x42, 0x50, 0x5F, 0x50, 0x6C, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5F, 0x43, 0x5F, 0x30, 0x2E, 0x46, 0x47, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x68, 0x6F, 0x72, 0x74, 0x63, 0x75, 0x74, 0x5F, 0x31, 0x00, 0x11, 0x00, 0x00, 0x00, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x74, 0x5F, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x00, 0x47, 0x00, 0x00, 0x00, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x74, 0x5F, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x3A, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x74, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x2E, 0x42, 0x50, 0x5F, 0x50, 0x6C, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5F, 0x43, 0x5F, 0x30, 0x2E, 0x46, 0x47, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x68, 0x6F, 0x72, 0x74, 0x63, 0x75, 0x74, 0x5F, 0x32, 0x00, 0x11, 0x00, 0x00, 0x00, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x74, 0x5F, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x00, 0x47, 0x00, 0x00, 0x00, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x74, 0x5F, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x3A, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x74, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x2E, 0x42, 0x50, 0x5F, 0x50, 0x6C, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5F, 0x43, 0x5F, 0x30, 0x2E, 0x46, 0x47, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x68, 0x6F, 0x72, 0x74, 0x63, 0x75, 0x74, 0x5F, 0x33, 0x00, 0x11, 0x00, 0x00, 0x00, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x74, 0x5F, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x00, 0x47, 0x00, 0x00, 0x00, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x74, 0x5F, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x3A, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x74, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x2E, 0x42, 0x50, 0x5F, 0x50, 0x6C, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5F, 0x43, 0x5F, 0x30, 0x2E, 0x46, 0x47, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x68, 0x6F, 0x72, 0x74, 0x63, 0x75, 0x74, 0x5F, 0x34, 0x00, 0x11, 0x00, 0x00, 0x00, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x74, 0x5F, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x00, 0x47, 0x00, 0x00, 0x00, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x74, 0x5F, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x3A, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x74, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x2E, 0x42, 0x50, 0x5F, 0x50, 0x6C, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5F, 0x43, 0x5F, 0x30, 0x2E, 0x46, 0x47, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x68, 0x6F, 0x72, 0x74, 0x63, 0x75, 0x74, 0x5F, 0x35, 0x00, 0x11, 0x00, 0x00, 0x00, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x74, 0x5F, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x00, 0x47, 0x00, 0x00, 0x00, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x74, 0x5F, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x3A, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x74, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x2E, 0x42, 0x50, 0x5F, 0x50, 0x6C, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5F, 0x43, 0x5F, 0x30, 0x2E, 0x46, 0x47, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x68, 0x6F, 0x72, 0x74, 0x63, 0x75, 0x74, 0x5F, 0x36, 0x00, 0x11, 0x00, 0x00, 0x00, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x74, 0x5F, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x00, 0x47, 0x00, 0x00, 0x00, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x74, 0x5F, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x3A, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x74, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x2E, 0x42, 0x50, 0x5F, 0x50, 0x6C, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5F, 0x43, 0x5F, 0x30, 0x2E, 0x46, 0x47, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x68, 0x6F, 0x72, 0x74, 0x63, 0x75, 0x74, 0x5F, 0x37, 0x00, 0x11, 0x00, 0x00, 0x00, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x74, 0x5F, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x00, 0x47, 0x00, 0x00, 0x00, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x74, 0x5F, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x3A, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x74, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x2E, 0x42, 0x50, 0x5F, 0x50, 0x6C, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5F, 0x43, 0x5F, 0x30, 0x2E, 0x46, 0x47, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x68, 0x6F, 0x72, 0x74, 0x63, 0x75, 0x74, 0x5F, 0x38, 0x00, 0x11, 0x00, 0x00, 0x00, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x74, 0x5F, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x00, 0x47, 0x00, 0x00, 0x00, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x74, 0x5F, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x3A, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x74, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x2E, 0x42, 0x50, 0x5F, 0x50, 0x6C, 0x61, 0x79, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x5F, 0x43, 0x5F, 0x30, 0x2E, 0x46, 0x47, 0x52, 0x65, 0x63, 0x69, 0x70, 0x65, 0x53, 0x68, 0x6F, 0x72, 0x74, 0x63, 0x75, 0x74, 0x5F, 0x39, 0x00 };

        [TestMethod]
        public void ArrayPropertyObjectRead()
        {
            using var stream = new MemoryStream(ObjectArrayBytes);
            using var reader = new BinaryReader(stream);

            var prop = SatisfactorySaveSerializer.DeserializeProperty(reader, BuildVersion) as ArrayProperty;

            Assert.AreNotEqual(null, prop);

            Assert.AreEqual(ObjectArrayName, prop.PropertyName);
            Assert.AreEqual(ArrayProperty.TypeName, prop.PropertyType);

            Assert.AreEqual(0, prop.Index);

            Assert.AreEqual(10, prop.Elements.Count);
            for (int i = 0; i < 10; i++)
                Assert.AreEqual(new ObjectReference("Persistent_Level", $"Persistent_Level:PersistentLevel.BP_PlayerState_C_0.FGRecipeShortcut_{i}"), ((IObjectPropertyValue)prop.Elements[i]).Reference);

            Assert.AreEqual(stream.Length, stream.Position);
        }

        [TestMethod]
        public void ArrayPropertyObjectWrite()
        {
            using var stream = new MemoryStream();
            using var writer = new BinaryWriter(stream);

            var prop = new ArrayProperty(ObjectArrayName);

            for (int i = 0; i < 10; i++)
                prop.Elements.Add(new ObjectArrayValue()
                {
                    Reference = new ObjectReference("Persistent_Level", $"Persistent_Level:PersistentLevel.BP_PlayerState_C_0.FGRecipeShortcut_{i}")
                });

            SatisfactorySaveSerializer.SerializeProperty(prop, writer);

            Assert.AreEqual(0, prop.SerializedLength);
            CollectionAssert.AreEqual(ObjectArrayBytes, stream.ToArray());
        }

        [TestMethod]
        public void ArrayPropertyStructRead()
        {
            Assert.Fail();
        }

        [TestMethod]
        public void ArrayPropertyStructWrite()
        {
            Assert.Fail();
        }

        [TestMethod]
        public void ArrayPropertyIntRead()
        {
            Assert.Fail();
        }

        [TestMethod]
        public void ArrayPropertyIntWrite()
        {
            Assert.Fail();
        }

        [TestMethod]
        public void ArrayPropertyByteRead()
        {
            Assert.Fail();

        }

        [TestMethod]
        public void ArrayPropertyByteWrite()
        {
            Assert.Fail();
        }
    }
}
