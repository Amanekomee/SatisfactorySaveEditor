using System.IO;

using Microsoft.VisualStudio.TestTools.UnitTesting;

using SatisfactorySaveParser.Save;
using SatisfactorySaveParser.Save.Properties;
using SatisfactorySaveParser.Save.Serialization;

namespace SatisfactorySaveParser.Tests.PropertyTypes
{
    [TestClass]
    public class InterfacePropertyTests
    {
        private const int BuildVersion = 139586;

        private const string InterfaceName = "mExtractableResource";
        private static readonly ObjectReference InterfaceValue = new ObjectReference("Persistent_Level", "Persistent_Level:PersistentLevel.BP_ResourceNodeGeyser5_1798");
        private static readonly byte[] InterfaceBytes = new byte[] { 0x15, 0x00, 0x00, 0x00, 0x6D, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x61, 0x62, 0x6C, 0x65, 0x52, 0x65, 0x73, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x00, 0x12, 0x00, 0x00, 0x00, 0x49, 0x6E, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6F, 0x70, 0x65, 0x72, 0x74, 0x79, 0x00, 0x56, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x11, 0x00, 0x00, 0x00, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x74, 0x5F, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x00, 0x3D, 0x00, 0x00, 0x00, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x74, 0x5F, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x3A, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6E, 0x74, 0x4C, 0x65, 0x76, 0x65, 0x6C, 0x2E, 0x42, 0x50, 0x5F, 0x52, 0x65, 0x73, 0x6F, 0x75, 0x72, 0x63, 0x65, 0x4E, 0x6F, 0x64, 0x65, 0x47, 0x65, 0x79, 0x73, 0x65, 0x72, 0x35, 0x5F, 0x31, 0x37, 0x39, 0x38, 0x00 };

        [TestMethod]
        public void InterfacePropertyRead()
        {
            using var stream = new MemoryStream(InterfaceBytes);
            using var reader = new BinaryReader(stream);

            var prop = SatisfactorySaveSerializer.DeserializeProperty(reader, BuildVersion) as InterfaceProperty;

            Assert.AreNotEqual(null, prop);

            Assert.AreEqual(InterfaceName, prop.PropertyName);
            Assert.AreEqual(InterfaceProperty.TypeName, prop.PropertyType);

            Assert.AreEqual(0, prop.Index);

            Assert.AreEqual(InterfaceValue, prop.Reference);

            Assert.AreEqual(stream.Length, stream.Position);
        }

        [TestMethod]
        public void InterfacePropertyWrite()
        {
            using var stream = new MemoryStream();
            using var writer = new BinaryWriter(stream);

            var prop = new InterfaceProperty(InterfaceName)
            {
                Reference = InterfaceValue
            };

            SatisfactorySaveSerializer.SerializeProperty(prop, writer);

            Assert.AreEqual(86, prop.SerializedLength);
            CollectionAssert.AreEqual(InterfaceBytes, stream.ToArray());
        }
    }
}
